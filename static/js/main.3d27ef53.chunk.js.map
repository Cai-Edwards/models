{"version":3,"sources":["projects/orbits/orbits.js","projects/orbits/orbits.jsx","projects/quadtree/quadtree.js","projects/maze/main.js","projects/quadtree/quadtree.jsx","projects/maze/classes.js","projects/maze/maze.jsx","projects/sorting/sorting.js","projects/sorting/sorting.jsx","projects/collsions/collisions.jsx","projects/chisquared/pvalue.js","projects/chisquared/chisquared.jsx","projects/chisquared/chisquared.js","Main.jsx","index.js"],"names":["c","ctx","stop","interval","now","then","elapsed","width","height","originx","originy","system","trail","fill","show_text","largest_mass","fpsmin","fpsmax","step","Body","mass","position","velocity","color","G","this","other","disp","displacement","magnitude","direction","bodies","final","forEach","e","f","force","length","shift","temp","push","randrange","lower","upper","Math","random","update_values","t","time","click","text","addEventListener","handle_down","handle_up","removeEventListener","clientX","clientY","vel","draw_body","beginPath","arc","floor","log10","calculate_radius","PI","closePath","draw","requestAnimationFrame","Date","clearRect","round","font","strokeStyle","fillText","toString","draw_text","globalAlpha","apply","total","update","fillStyle","lineWidth","moveTo","i","xc","yc","quadraticCurveTo","n","stroke","draw_approx_trail","k","lineTo","draw_exact_trail","boundary","tree","Orbits","props","state","num","handleChange","bind","handleCheckboxChange","handleReset","handleClear","handleRender","document","getElementById","getContext","setState","target","name","value","reset","checked","id","window","innerWidth","innerHeight","onClick","type","onChange","React","Component","Quadtree","capacity","points","divided","point","contains","divide","ne","insert","nw","se","sw","x","y","w","h","Rect","rect","p","Point","r","add_point","maze","pixel_width","pixel_height","canvas_height","canvas_width","rows","columns","speed","skip","frontier","possible_nodes","path","updated","size","init","Maze","nodes","generate","row","column","Node","current","connections","current_node","colour","visited","travel_cost","shortest_found","in_list","previous_node","total_cost","Infinity","node","option","generate_maze","a","connect","get_nodes","end","check_in","val","arr","depth_first","current_path","connection","connecting_walls","options","choice","remove_wall","pop","prims","index","splice","astar","end_node","offset","abs","done","trace","unshift","draw_path","g","cost","shortest","newnode","b","cos","join","Promise","resolve","setTimeout","wall","prev","coord","bar_width","handleUpdate","_rows","_columns","_speed","_step","_skip","low","high","randomise","bubble_sort","swap","selection_sort","maxidx","j","Sorting","s","parseInt","normal__x","z","z2","exp","sqrt","p_nor","normaldist","q_chi2","df","chi2","chi","ChiSquared","inputs","values","lookup","horizontal","horizontalv","vertical","verticalv","sumh","sumv","freq","enough","warning","sig","renderTable","dataChange","renderData","renderHeader","headerChange","renderLeft","leftChange","footerSum","totalUpdate","expectedBody","expectedHeader","hv","zv","hn","zn","forceUpdate","v","l","parseFloat","expected","frac","col","expected_frequencies","sum","o","cont","console","log","chi_sq","reduce","map","inp","pos","placeholder","data","key","min","className","toFixed","en","war","result","max","Main","basename","exact","class","to","ReactDOM","render"],"mappings":"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","file":"static/js/main.3d27ef53.chunk.js","sourcesContent":["let c, ctx, stop, interval, now, then, elapsed, width, height, originx, originy;\r\nlet system = [];\r\nlet trail = 'none';\r\nlet fill = false;\r\nlet show_text = false;\r\n\r\nlet largest_mass = 0;\r\n\r\nconst fps = 60;\r\nlet fpsmin = 100000;\r\nlet fpsmax = 0;\r\n\r\nlet step = 1;\r\n\r\nclass Body {\r\n\r\n    G = 6.674e-11;\r\n\r\n    constructor(mass, position, velocity, color) {\r\n        this.mass = mass;\r\n        this.position = position;\r\n        this.velocity = velocity;\r\n        this.trail = [];\r\n        this.color = color;\r\n\r\n        largest_mass = largest_mass < mass ? mass : largest_mass;\r\n    }\r\n\r\n    displacement(other) {\r\n        return ((other.position[0] - this.position[0]) ** 2 + (other.position[1] - this.position[1]) ** 2) ** 0.5\r\n    }\r\n\r\n    force(other) {\r\n        let disp = this.displacement(other)\r\n        let magnitude = this.G * ((other.mass * this.mass) / disp ** 2)\r\n        let direction = [(other.position[0] - this.position[0]) / disp, (other.position[1] - this.position[1]) / disp]\r\n\r\n        return [magnitude * direction[0], magnitude * direction[1]]\r\n    }\r\n\r\n    total(bodies) {\r\n        let final = [0, 0];\r\n\r\n        bodies.forEach(e => {\r\n            if (e !== this) {\r\n                let f = this.force(e);\r\n                final[0] += f[0];\r\n                final[1] += f[1];\r\n            }\r\n        });\r\n\r\n        return final;\r\n    }\r\n\r\n    apply(force) {\r\n        this.velocity[0] = (this.velocity[0] * this.mass + force[0] * step) / this.mass;\r\n        this.velocity[1] = (this.velocity[1] * this.mass + force[1] * step) / this.mass;\r\n    }\r\n\r\n    update() {\r\n        this.position[0] += this.velocity[0] * step;\r\n        this.position[1] += this.velocity[1] * step;\r\n\r\n        if (this.trail.length === 20) {\r\n            this.trail.shift();\r\n        }\r\n\r\n        let temp = [this.position[0], this.position[1]];\r\n        this.trail.push(temp);\r\n\r\n    }\r\n}\r\n\r\n//---------------------- Helper functions ------------------------\r\n\r\nfunction randrange(lower, upper) {\r\n    return Math.random() * (upper - lower) + lower;\r\n}\r\n\r\nfunction calculate_radius(e) {\r\n    return Math.floor(2 ** (Math.log10(e.mass) / 3))\r\n}\r\n\r\nexport function update_values(t, f, time, click, text) {\r\n    trail = t;\r\n    fill = f;\r\n    step = time;\r\n    show_text = text;\r\n\r\n    if (click) {\r\n        add_listener();\r\n    } else {\r\n        remove_listener();\r\n    }\r\n\r\n    fpsmin = 1000;\r\n    fpsmax = 0;\r\n}\r\n\r\nfunction add_listener() {\r\n    c.addEventListener('mousedown', handle_down);\r\n    c.addEventListener('mouseup', handle_up);\r\n}\r\n\r\nfunction remove_listener() {\r\n    c.removeEventListener('mousedown', handle_down);\r\n    c.removeEventListener('mouseup', handle_up);\r\n}\r\n\r\nfunction handle_down(e) {\r\n    originx = e.clientX;\r\n    originy = e.clientY;\r\n\r\n}\r\n\r\nfunction handle_up(e) {\r\n\r\n    let vel = [(e.clientX - originx) / 20, (e.clientY - originy) / 20]\r\n    system.push(new Body(\r\n        1e10,\r\n        [originx, originy],\r\n        vel,\r\n        'rgb(0, 0, 0)'\r\n    ))\r\n\r\n    draw_body(system[system.length - 1]);\r\n}\r\n\r\n//---------------------- Initialise functions --------------------------\r\n\r\nexport function init() {\r\n    c = document.getElementById(\"orbit\");\r\n    ctx = c.getContext(\"2d\");\r\n\r\n    width = c.width;\r\n    height = c.height;\r\n\r\n    stop = 1;\r\n}\r\n\r\nexport function reset(num) {\r\n    stop = 1;\r\n\r\n    ctx.clearRect(0, 0, width, height);\r\n\r\n    system = [];\r\n\r\n    system.push(new Body(\r\n        1e14,\r\n        [Math.round(width / 2), Math.round(height / 2)],\r\n        [0, 0],\r\n        'rgb(0, 0, 0)'\r\n    ))\r\n\r\n    for (let i = 0; i < num; i++) {\r\n        system.push(new Body(\r\n            Math.random() * 1e10,\r\n            [randrange(0, width), randrange(0, height)],\r\n            [randrange(-5, 5), randrange(-5, 5)],\r\n            'rgb(' + (Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255)) + ')'\r\n        ))\r\n\r\n\r\n        ctx.fillStyle = system[i].color;\r\n        draw_body(system[i]);\r\n\r\n    }\r\n}\r\n\r\nexport function clear() {\r\n    system = [];\r\n    ctx.clearRect(0, 0, width, height)\r\n}\r\n\r\n\r\n// ----------------------- Draw functions ---------------------------\r\n\r\nfunction draw_body(e) {\r\n    ctx.beginPath();\r\n\r\n\r\n    ctx.arc(e.position[0], e.position[1], calculate_radius(e), 0, 2 * Math.PI);\r\n\r\n    ctx.fill();\r\n    ctx.closePath();\r\n}\r\n\r\n\r\nfunction draw_approx_trail(e) {\r\n\r\n    ctx.beginPath();\r\n\r\n    ctx.moveTo(e.trail[0], e.trail[1]);\r\n\r\n\r\n    //Code adapted from https://stackoverflow.com/questions/7054272/how-to-draw-smooth-curve-through-n-points-using-javascript-html5-canvas\r\n    //Generates an approximate curve through the trail points.\r\n\r\n    for (let i = 0; i < e.trail.length - 2; i++) {\r\n\r\n        let xc = (e.trail[i][0] + e.trail[i + 1][0]) / 2;\r\n        let yc = (e.trail[i][1] + e.trail[i + 1][1]) / 2;\r\n\r\n        ctx.quadraticCurveTo(e.trail[i][0], e.trail[i][1], xc, yc);\r\n    }\r\n\r\n    if (e.trail.length > 1) {\r\n        let n = e.trail.length - 2;\r\n\r\n        ctx.quadraticCurveTo(e.trail[n][0], e.trail[n][1], e.trail[n + 1][0], e.trail[n + 1][1]);\r\n    }\r\n\r\n    ctx.stroke();\r\n\r\n    if (fill === true) {\r\n        ctx.fill();\r\n    }\r\n\r\n    ctx.closePath();\r\n}\r\n\r\nfunction draw_exact_trail(e) {\r\n    ctx.beginPath();\r\n\r\n    ctx.moveTo(e.trail[0][0], e.trail[0][1]);\r\n\r\n    e.trail.forEach(k => {\r\n\r\n        ctx.lineTo(k[0], k[1]);\r\n    })\r\n\r\n    ctx.stroke();\r\n\r\n    if (fill === true) {\r\n        ctx.fill();\r\n    }\r\n\r\n    ctx.closePath();\r\n}\r\n\r\nfunction draw_text() {\r\n\r\n    let f = Math.round(1000 / elapsed);\r\n    fpsmax = f > fpsmax ? f : fpsmax;\r\n    fpsmin = f < fpsmin ? f : fpsmin;\r\n\r\n    ctx.font = '18px serif';\r\n    ctx.strokeStyle = 'rgb(0, 0, 0)';\r\n    ctx.fillText('fps: ' + f.toString(), 10, 20);\r\n    ctx.fillText('max: ' + fpsmax.toString(), 10, 40);\r\n    ctx.fillText('min: ' + fpsmin.toString(), 10, 60)\r\n    ctx.fillText('bodies: ' + system.length.toString(), 10, 80)\r\n}\r\n\r\n//------------------------------ Loop -------------------------------\r\n\r\nexport function rend() {\r\n    stop = stop ^ 1;\r\n    interval = 1000 / fps\r\n    then = Date.now();\r\n\r\n    draw();\r\n}\r\n\r\nfunction draw() {\r\n    if (!stop) {\r\n        requestAnimationFrame(draw);\r\n    }\r\n\r\n    now = Date.now();\r\n    elapsed = now - then;\r\n\r\n    if (elapsed > interval) {\r\n        then = now - (elapsed % interval);\r\n\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        if (show_text) {\r\n            draw_text();\r\n        }\r\n\r\n\r\n        system.forEach(e => {\r\n\r\n            ctx.globalAlpha = 1;\r\n\r\n            e.apply(e.total(system));\r\n            e.update();\r\n\r\n            ctx.strokeStyle = e.color;\r\n            ctx.fillStyle = e.color;\r\n\r\n            draw_body(e);\r\n\r\n            ctx.globalAlpha = 0.8;\r\n            ctx.lineWidth = 1;\r\n\r\n\r\n            switch (trail) {\r\n                case 'curve':\r\n                    draw_approx_trail(e);\r\n                    break;\r\n\r\n                case 'line':\r\n                    draw_exact_trail(e);\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { init, rend, reset, update_values, clear } from './orbits';\r\n\r\nexport class Orbits extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tnum: 100,\r\n\t\t\ttrail: 'none',\r\n\t\t\tfill: false,\r\n\t\t\ttime: 1,\r\n\t\t\tclick: false,\r\n\t\t\ttext: false\r\n\t\t}\r\n\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\tthis.handleCheckboxChange = this.handleCheckboxChange.bind(this);\r\n\t\tthis.handleReset = this.handleReset.bind(this);\r\n\t\tthis.handleClear = this.handleClear.bind(this);\r\n\t\tthis.handleRender = this.handleRender.bind(this);\r\n\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tinit();\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tupdate_values(\r\n\t\t\tthis.state.trail,\r\n\t\t\tthis.state.fill,\r\n\t\t\tthis.state.time,\r\n\t\t\tthis.state.click,\r\n\t\t\tthis.state.text\r\n\t\t);\r\n\t}\r\n\r\n\thandleChange(e) {\r\n\t\tthis.setState({ [e.target.name]: e.target.value })\r\n\t}\r\n\r\n\thandleReset(e) {\r\n\t\treset(this.state.num);\r\n\t}\r\n\r\n\thandleClear(e) {\r\n\t\tclear();\r\n\t}\r\n\r\n\thandleCheckboxChange(e) {\r\n\t\tthis.setState({ [e.target.name]: e.target.checked })\r\n\t}\r\n\r\n\thandleRender() {\r\n\t\trend();\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id=\"outer\">\r\n\t\t\t\t<div id='canvas'>\r\n\t\t\t\t\t<canvas id=\"orbit\" width={window.innerWidth} height={window.innerHeight / 1.5}></canvas>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<button onClick={this.handleRender}>Stop/Start</button>\r\n\r\n\t\t\t\t<br />\r\n\r\n\t\t\t\t<label>\r\n\t\t\t\t\tNumber of bodies\r\n\t\t\t\t\t<input name='num' type='number' value={this.state.num} onChange={this.handleChange} />\r\n\t\t\t\t</label>\r\n\r\n\t\t\t\t<br />\r\n\r\n\t\t\t\t<label>\r\n\t\t\t\t\tTrail type\r\n\t\t\t\t\t<select name='trail' value={this.state.trail} onChange={this.handleChange}>\r\n\t\t\t\t\t\t<option value=\"none\">No trail</option>\r\n\t\t\t\t\t\t<option value=\"line\">Lines</option>\r\n\t\t\t\t\t\t<option value=\"curve\">Approximate curve</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</label>\r\n\r\n\t\t\t\t<br />\r\n\r\n\t\t\t\t<label>\r\n\t\t\t\t\tFill curve\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tname=\"fill\"\r\n\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\tchecked={this.state.fill}\r\n\t\t\t\t\t\tonChange={this.handleCheckboxChange} />\r\n\t\t\t\t</label>\r\n\r\n\t\t\t\t<br />\r\n\r\n\t\t\t\t<label>\r\n\t\t\t\t\tAdd planet on click.\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tname=\"click\"\r\n\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\tchecked={this.state.click}\r\n\t\t\t\t\t\tonChange={this.handleCheckboxChange} />\r\n\t\t\t\t</label>\r\n\r\n\t\t\t\t<br />\r\n\r\n\t\t\t\t<label>\r\n\t\t\t\t\tShow details\r\n\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tname=\"text\"\r\n\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\tchecked={this.state.text}\r\n\t\t\t\t\t\tonChange={this.handleCheckboxChange} />\r\n\t\t\t\t</label>\r\n\r\n\t\t\t\t<br />\r\n\r\n\r\n\t\t\t\t<label>\r\n\t\t\t\t\tSimulation speed\r\n\t\t\t\t\t<input name='time' type='number' value={this.state.time} onChange={this.handleChange} />\r\n\t\t\t\t</label>\r\n\r\n\t\t\t\t<br />\r\n\r\n\r\n\t\t\t\t<button onClick={this.handleReset}>Generate</button>\r\n\t\t\t\t<button onClick={this.handleClear}>Clear</button>\r\n\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","class Quadtree {\r\n    constructor(boundary, capacity) {\r\n        this.boundary = boundary;\r\n        this.capacity = capacity;\r\n        this.points = [];\r\n        this.divided = false;\r\n    }\r\n\r\n    insert(point) {\r\n        if (!this.boundary.contains(point)) {\r\n            return;\r\n        }\r\n\r\n        if (this.points.length < this.capacity) {\r\n            this.points.push(point)\r\n        } else {\r\n            if (!this.divided) {\r\n                this.divide();\r\n                this.divided = true;\r\n            }\r\n\r\n            this.ne.insert(point);\r\n            this.nw.insert(point);\r\n            this.se.insert(point);\r\n            this.sw.insert(point);\r\n\r\n        }\r\n    }\r\n\r\n    divide() {\r\n        let x = this.boundary.x;\r\n        let y = this.boundary.y;\r\n        let w = this.boundary.w;\r\n        let h = this.boundary.h;\r\n\r\n        this.ne = new Quadtree(new Rect(x - (w / 2), y - (h / 2), w / 2, h / 2), this.capacity);\r\n        this.nw = new Quadtree(new Rect(x + (w / 2), y - (h / 2), w / 2, h / 2), this.capacity);\r\n        this.se = new Quadtree(new Rect(x - (w / 2), y + (h / 2), w / 2, h / 2), this.capacity);\r\n        this.sw = new Quadtree(new Rect(x + (w / 2), y + (h / 2), w / 2, h / 2), this.capacity);\r\n    }\r\n\r\n    draw() {\r\n\r\n        let x = this.boundary.x;\r\n        let y = this.boundary.y;\r\n        let w = this.boundary.w;\r\n        let h = this.boundary.h;\r\n\r\n        ctx.beginPath();\r\n        ctx.rect(x - w, y - h, w * 2, h * 2)\r\n        ctx.closePath();\r\n\r\n\r\n        this.points.forEach(p => {\r\n            ctx.beginPath();\r\n\r\n            ctx.arc(p.x, p.y, 1, 0, Math.PI * 2)\r\n\r\n            ctx.closePath();\r\n        })\r\n        ctx.stroke();\r\n\r\n        if (this.divided) {\r\n            this.ne.draw();\r\n            this.nw.draw();\r\n            this.se.draw();\r\n            this.sw.draw();\r\n        }\r\n        ctx.stroke();\r\n\r\n    }\r\n}\r\n\r\nclass Point {\r\n    constructor(x, y, r) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.r = r;\r\n    }\r\n\r\n    distance_to() {\r\n\r\n    }\r\n\r\n    collides() {\r\n\r\n    }\r\n}\r\n\r\nclass Rect {\r\n    constructor(x, y, w, h) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.w = w;\r\n        this.h = h;\r\n    }\r\n\r\n    contains(p) {\r\n        return (p.x > this.x - this.w && p.x < this.x + this.w &&\r\n            p.y > this.y - this.h && p.y < this.y + this.h)\r\n    }\r\n}\r\n\r\nexport function init(height) {\r\n    c = document.getElementById(\"quad\");\r\n    ctx = c.getContext(\"2d\");\r\n\r\n    boundary = new Rect(height / 2, height / 2, height / 2, height / 2);\r\n\r\n\r\n    window.addEventListener(\"click\", add_point)\r\n\r\n    draw();\r\n}\r\n\r\nfunction add_point(e) {\r\n    system.push(new Point(e.clientX, e.clientY));\r\n}\r\n\r\nfunction draw() {\r\n\r\n    tree = new Quadtree(boundary, 1)\r\n\r\n    system.forEach(e => {\r\n        tree.insert(e);\r\n    })\r\n\r\n    tree.draw();\r\n\r\n    requestAnimationFrame(draw);\r\n}\r\n\r\nlet boundary, tree, c, ctx\r\nlet system = [];","import { Maze } from './classes.js';\r\n\r\nlet c;\r\nlet ctx;\r\n\r\nlet maze;\r\n\r\nlet pixel_width;\r\nlet pixel_height;\r\n\r\nlet canvas_height;\r\nlet canvas_width;\r\n\r\nlet step;\r\nlet rows;\r\nlet columns;\r\nlet speed;\r\nlet skip;\r\n\r\nlet frontier;\r\nlet possible_nodes;\r\nlet path;\r\nlet updated;\r\n\r\nlet current_position;\r\nlet stop;\r\nlet size;\r\n\r\n/** Initialise starting variables */\r\nexport function initialise() {\r\n    c = document.getElementById('maze_canvas');\r\n    ctx = c.getContext(\"2d\");\r\n\r\n    canvas_height = c.height;\r\n    canvas_width = c.width;\r\n\r\n    step = true;\r\n    columns = 25;\r\n    rows = 10;\r\n    speed = 100;\r\n    skip = 1;\r\n\r\n    ctx.lineWidth = 1;\r\n    ctx.fillStyle = \"red\";\r\n\r\n    generate_maze();\r\n}\r\n\r\n/** Generate a maze and display. */\r\nexport async function generate_maze() {\r\n    stop = 1;\r\n    maze = new Maze(rows, columns);\r\n    maze.connect();\r\n\r\n    pixel_width = Math.floor(canvas_width / columns);\r\n    pixel_height = Math.floor(canvas_height / rows);\r\n\r\n    current_position = [0, 0];\r\n    frontier = [];\r\n    path = [];\r\n    possible_nodes = [];\r\n    size = ((maze.rows * maze.columns) ** 0.6);\r\n    updated = maze.get_nodes();\r\n\r\n    ctx.clearRect(0, 0, canvas_width, canvas_height);\r\n\r\n    await draw();\r\n}\r\n\r\n/** Update the modifiable variables*/\r\nexport function update_values(_rows, _columns, _speed, _step, _skip) {\r\n    rows = _rows;\r\n    columns = _columns;\r\n    speed = _speed;\r\n    step = _step;\r\n    skip = _skip;\r\n}\r\n\r\n/** Stop animation */\r\nexport function end() {\r\n    stop = true;\r\n}\r\n\r\n/** Return if item is in array\r\n * @param {any} val Value to search for\r\n * @param {Array} arr Array to search through\r\n * @returns {boolean} Boolean\r\n */\r\nfunction check_in(val, arr) {\r\n    for (let k in arr) {\r\n        if (val === arr[k]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/** Depth first generation */\r\nexport async function depth_first() {\r\n    stop = false;\r\n    let n = 0;\r\n    updated = [];\r\n\r\n\r\n    let current_path = [maze.nodes[0][0]];\r\n    let current_node = current_path[current_path.length - 1];\r\n\r\n    frontier = current_path;\r\n\r\n    while (current_path.length !== 0) {\r\n        if (stop) {\r\n            return;\r\n        }\r\n\r\n        if (step && n % skip == 0 && current_path.length !== 0) {\r\n            current_position = [current_node.x, current_node.y];\r\n\r\n            n = 0;\r\n            await draw();\r\n        }\r\n\r\n        current_node = current_path[current_path.length - 1];\r\n\r\n        current_node.visited = true;\r\n        let connection = maze.connecting_walls(current_node, true);\r\n        let options = [];\r\n\r\n        connection.forEach(e => {\r\n            if (!e.visited) {\r\n                options.push(e);\r\n            }\r\n        })\r\n\r\n        if (!options.length) {\r\n            current_path.pop();\r\n            current_node.colour = \"white\"\r\n            updated.push(current_node);\r\n\r\n        } else {\r\n            current_node.colour = \"aqua\"\r\n            updated.push(current_node);\r\n            let choice = options[Math.floor(Math.random() * options.length)];\r\n\r\n            current_node.remove_wall(choice);\r\n            choice.remove_wall(current_node);\r\n\r\n            current_path.push(choice);\r\n\r\n        }\r\n\r\n        n++;\r\n\r\n    }\r\n\r\n    updated = maze.get_nodes();\r\n    draw();\r\n}\r\n\r\n/** Prim's algorithm generation */\r\nexport async function prims() {\r\n    stop = 0;\r\n\r\n    let current_node;\r\n    let n = 0;\r\n\r\n    maze.nodes[0][0].visited = true;\r\n\r\n    frontier = [maze.nodes[0][1], maze.nodes[1][0]];\r\n\r\n    while (frontier.length !== 0) {\r\n        if (stop) {\r\n            return;\r\n        }\r\n\r\n        let index = Math.floor(Math.random() * frontier.length);\r\n        current_node = frontier[index];\r\n\r\n        if (step && n % skip == 0) {\r\n            current_position = [current_node.x, current_node.y];\r\n            n = 0;\r\n            await draw();\r\n        }\r\n\r\n        current_node.visited = true;\r\n\r\n        let connection = maze.connecting_walls(current_node, true);\r\n        let options = [];\r\n\r\n        connection.forEach(e => {\r\n            if (e.visited) {\r\n                options.push(e);\r\n            }\r\n        })\r\n\r\n        if (!options.length) {\r\n            let a = frontier.splice(index, 1);\r\n            a.colour = \"white\"\r\n            updated.push(a);\r\n        } else {\r\n            let choice = options[Math.floor(Math.random() * options.length)];\r\n\r\n            current_node.remove_wall(choice);\r\n            choice.remove_wall(current_node);\r\n\r\n            updated.push(current_node)\r\n            current_node.colour = \"white\"\r\n\r\n            updated.push(choice)\r\n            choice.colour = \"white\"\r\n\r\n            frontier.splice(index, 1);\r\n\r\n            connection.forEach(e => {\r\n                if (!e.visited && !check_in(e, frontier)) {\r\n                    frontier.push(e);\r\n                    updated.push(e)\r\n                    e.colour = \"aqua\"\r\n                }\r\n            })\r\n        }\r\n\r\n        n++;\r\n\r\n    }\r\n\r\n    draw();\r\n\r\n}\r\n\r\n\r\n/** A* pathfinding algorithm */\r\nexport async function astar() {\r\n    let current_node = maze.nodes[0][0]\r\n    let end_node = maze.nodes[maze.rows - 1][maze.columns - 1]\r\n\r\n    let offset = Math.abs(end_node.y - current_node.y) + Math.abs(end_node.x - current_node.x);\r\n    current_node.total_cost = 0\r\n    current_node.previous_node = -1\r\n    current_node.done = true\r\n\r\n    let n = 0;\r\n\r\n\r\n\r\n    let shortest;\r\n    let newnode;\r\n    let h;\r\n    let cost;\r\n\r\n    while (true) {\r\n\r\n        if (stop) {\r\n            return;\r\n        }\r\n\r\n        if (current_node == end_node) {\r\n            let trace = end_node;\r\n            while (trace.previous_node != -1) {\r\n                path.unshift([trace.x, trace.y]);\r\n                trace = trace.previous_node;\r\n            }\r\n\r\n            path.unshift([trace.x, trace.y]);\r\n\r\n            await draw();\r\n\r\n            draw_path();\r\n\r\n            return path, end_node.g;\r\n        }\r\n\r\n        let nodes = [];\r\n\r\n        let options = maze.connecting_walls(current_node, false);\r\n        options.forEach(e => {\r\n            if (!e.shortest_found) {\r\n                nodes.push(e)\r\n            }\r\n        })\r\n\r\n        nodes.forEach(node => {\r\n            h = Math.abs(end_node.y - node.y) + Math.abs(end_node.x - node.x)\r\n\r\n            cost = current_node.travel_cost + h * 2\r\n\r\n            if (cost < node.total_cost) {\r\n                node.total_cost = cost\r\n                node.travel_cost = current_node.travel_cost + 1\r\n                node.previous_node = current_node\r\n            }\r\n\r\n            if (!node.in_list) {\r\n                possible_nodes.push(node);\r\n                updated.push(node);\r\n                node.colour = \"aqua\";\r\n                node.in_list = true;\r\n            }\r\n\r\n        })\r\n\r\n        shortest = Infinity;\r\n        newnode = null;\r\n\r\n        possible_nodes.forEach(node => {\r\n            if (!node.shortest_found) {\r\n                if (node.total_cost <= shortest) {\r\n                    newnode = node;\r\n                    shortest = node.total_cost;\r\n                }\r\n            }\r\n        })\r\n\r\n        if (newnode == null) {\r\n            return \"No route\";\r\n        }\r\n\r\n        newnode.shortest_found = true;\r\n        updated.push(newnode);\r\n\r\n        let b = Math.floor(150 * (Math.cos(newnode.total_cost / size - offset) ** 2) + 50)\r\n        let g = Math.floor(150 * (Math.cos(newnode.total_cost / size - offset - 200) ** 2) + 50)\r\n        let r = Math.floor(150 * (Math.cos(newnode.total_cost / size - offset - 400) ** 2) + 50)\r\n\r\n        newnode.colour = \"rgb(\" + [r, g, b].join(\",\") + \")\";\r\n        current_node = newnode;\r\n\r\n        if (step && n % skip === 0) {\r\n            await draw();\r\n        }\r\n\r\n        n++;\r\n    }\r\n\r\n}\r\n\r\nfunction draw() {\r\n\r\n    return new Promise(resolve => {\r\n        setTimeout(() => {\r\n\r\n            ctx.beginPath();\r\n            updated.forEach(node => {\r\n\r\n                ctx.beginPath();\r\n                ctx.rect(node.x * pixel_width, node.y * pixel_height, pixel_width, pixel_height);\r\n\r\n                ctx.fillStyle = node.colour;\r\n                ctx.fill();\r\n                ctx.closePath();\r\n\r\n                ctx.beginPath();\r\n\r\n                node.connections.forEach(e => {\r\n\r\n\r\n                    let id = e[0]\r\n                    let wall = e[2]\r\n\r\n                    let x = pixel_width * node.x;\r\n                    let y = pixel_height * node.y;;\r\n\r\n                    if (wall) {\r\n                        switch (id) {\r\n                            case 0:\r\n                                ctx.moveTo(x, y);\r\n                                ctx.lineTo(x + pixel_width, y);\r\n                                break;\r\n\r\n                            case 1:\r\n                                ctx.moveTo(x + pixel_width, y);\r\n                                ctx.lineTo(x + pixel_width, y + pixel_height);\r\n                                break;\r\n\r\n                            case 2:\r\n                                ctx.moveTo(x + pixel_width, y + pixel_height);\r\n                                ctx.lineTo(x, y + pixel_height);\r\n                                break;\r\n\r\n                            case 3:\r\n                                ctx.moveTo(x, y + pixel_height);\r\n                                ctx.lineTo(x, y);\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                });\r\n\r\n                ctx.rect(0, 0, maze.columns * pixel_width, maze.rows * pixel_height);\r\n\r\n                ctx.strokeStyle = \"black\";\r\n                ctx.stroke();\r\n\r\n                ctx.closePath();\r\n\r\n            })\r\n\r\n            updated = [];\r\n\r\n            resolve(\"Drawn\");\r\n        }, speed)\r\n\r\n    })\r\n}\r\n\r\nfunction draw_path() {\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = \"red\";\r\n    let prev = [0, 0]\r\n\r\n    ctx.moveTo(pixel_width * (prev[0] + 0.5), pixel_height * (prev[1] + 0.5))\r\n\r\n    path.forEach(coord => {\r\n        ctx.lineTo(pixel_width * (coord[0] + 0.5), pixel_height * (coord[1] + 0.5))\r\n    })\r\n\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n}\r\n","import React from 'react';\r\nimport { init } from './quadtree';\r\n\r\nexport class Quadtree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        init(window.innerHeight);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas id=\"quad\" width={window.innerHeight} height={window.innerHeight}></canvas>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","/**Maze Class*/\r\nexport class Maze {\r\n    /** \r\n    * @param {Int} rows number of rows\r\n    * @param {Int} columns number of columns\r\n    */\r\n    constructor(rows, columns) {\r\n        this.columns = columns;\r\n        this.rows = rows;\r\n\r\n        this.nodes = [];\r\n        this.generate();\r\n    }\r\n\r\n    /**Generate the maze structure and insert generic nodes.*/\r\n    generate() {\r\n\r\n        for (let row = 0; row < this.rows; row++) {\r\n            this.nodes.push([]);\r\n\r\n            for (let column = 0; column < this.columns; column++) {\r\n                this.nodes[row].push(new Node(column, row));\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Assign all the connections each node has */\r\n    connect() {\r\n        let current;\r\n\r\n        for (let row = 0; row < this.rows; row++) {\r\n\r\n            for (let column = 0; column < this.columns; column++) {\r\n                current = this.nodes[row][column];\r\n                let id = 0;\r\n\r\n                //North\r\n                if (row !== 0) {\r\n                    current.connections.push([id, this.nodes[row - 1][column], true]);\r\n                }\r\n\r\n                id++;\r\n\r\n                //East\r\n                if (column !== this.columns - 1) {\r\n                    current.connections.push([id, this.nodes[row][column + 1], true]);\r\n                }\r\n\r\n                id++;\r\n\r\n                //South\r\n                if (row !== this.rows - 1) {\r\n                    current.connections.push([id, this.nodes[row + 1][column], true]);\r\n                }\r\n\r\n                id++;\r\n\r\n                //West\r\n                if (column !== 0) {\r\n                    current.connections.push([id, this.nodes[row][column - 1], true]);\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Return all existing/nonexistant walls adjactent to current node\r\n     * @param {Node} current_node The targeted node\r\n     * @param {Boolean} state If the wall exists or not\r\n     * @returns {Array<Node>} Adjacent nodes with a wall inbetween \r\n     */\r\n    connecting_walls(current_node, state) {\r\n        const nodes = [];\r\n        current_node.connections.forEach(e => {\r\n            if (e[2] == state) {\r\n                nodes.push(e[1]);\r\n            }\r\n        })\r\n\r\n        return nodes;\r\n    }\r\n\r\n    get_nodes() {\r\n        const nodes = [];\r\n\r\n        for (let row = 0; row < this.rows; row++) {\r\n\r\n            for (let column = 0; column < this.columns; column++) {\r\n                nodes.push(this.nodes[row][column]);\r\n            }\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class Node {\r\n    constructor(x, y) {\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n        this.colour = \"white\";\r\n\r\n        /** [id, node, wall] */\r\n        this.connections = [];\r\n\r\n        //Maze generation\r\n        this.visited = false;\r\n\r\n        //Pathfinding\r\n        this.travel_cost = 0;\r\n        this.shortest_found = false;\r\n        this.in_list = false;\r\n        this.previous_node = null;\r\n        this.total_cost = Infinity;\r\n    }\r\n\r\n    remove_wall(node) {\r\n        this.connections.forEach(option => {\r\n            if (option[1] == node) {\r\n                option[2] = false;\r\n                return;\r\n            }\r\n        })\r\n    }\r\n}","import React from 'react';\r\nimport { initialise, update_values, end, generate_maze, depth_first, prims, astar } from './main'\r\n\r\nexport class Maze extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            width: 25,\r\n            height: 10,\r\n            speed: 100,\r\n            skip: 1,\r\n            step: true\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        initialise();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.handleUpdate();\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n\r\n    handleUpdate() {\r\n        update_values(\r\n            this.state.height,\r\n            this.state.width,\r\n            this.state.speed,\r\n            this.state.step,\r\n            this.state.skip\r\n        )\r\n    }\r\n\r\n    handleCheckboxChange(e) {\r\n        this.setState({ [e.target.name]: e.target.checked })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"outer\">\r\n                <h1>Maze</h1>\r\n\r\n                <button onClick={generate_maze}>Generate</button>\r\n\r\n                <button onClick={depth_first}>Depth first</button>\r\n                <button onClick={prims}>Prims</button>\r\n\r\n                <button onClick={astar}>A*</button>\r\n\r\n\r\n                <button onClick={end}>Stop</button>\r\n\r\n                <br />\r\n\r\n                <label>\r\n                    Width\r\n                    <input\r\n                        name=\"width\"\r\n                        type=\"number\"\r\n                        value={this.state.width}\r\n                        onChange={this.handleChange} />\r\n                </label>\r\n\r\n                <br />\r\n\r\n                <label>\r\n                    Height\r\n                    <input\r\n                        name=\"height\"\r\n                        type=\"number\"\r\n                        value={this.state.height}\r\n                        onChange={this.handleChange} />\r\n                </label>\r\n\r\n                <br />\r\n\r\n                <label>\r\n                    Speed\r\n                    <input\r\n                        name=\"speed\"\r\n                        type=\"number\"\r\n                        value={this.state.speed}\r\n                        onChange={this.handleChange} />\r\n                </label>\r\n\r\n                <br />\r\n\r\n                <label>\r\n                    Skip\r\n                    <input\r\n                        name=\"skip\"\r\n                        type=\"number\"\r\n                        value={this.state.skip}\r\n                        onChange={this.handleChange} />\r\n                </label>\r\n\r\n                <br />\r\n\r\n                <label>\r\n                    Show creation\r\n\t\t\t\t\t<input\r\n                        name=\"step\"\r\n                        type=\"checkbox\"\r\n                        checked={this.state.step}\r\n                        onChange={this.handleCheckboxChange} />\r\n                </label>\r\n\r\n                <canvas id=\"maze_canvas\" width={window.innerWidth / 1.025} height={Math.round(window.innerHeight / 1.35)}></canvas>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","let c, ctx, height, width, arr, num, stop, speed, skip, bar_width;\r\n\r\nfunction randomise() {\r\n    arr = [];\r\n\r\n    for (let i = 0; i < num; i++) {\r\n        arr.push(randrange(5, width));\r\n    }\r\n}\r\n\r\nexport function init() {\r\n    c = document.getElementById('sorting_canvas');\r\n    ctx = c.getContext(\"2d\");\r\n    height = c.height;\r\n    width = c.width;\r\n    stop = 0;\r\n    speed = 10;\r\n    skip = 1;\r\n}\r\n\r\nexport function reset() {\r\n    stop = 1;\r\n    randomise();\r\n\r\n    let t = speed;\r\n    speed = 0;\r\n    draw();\r\n    speed = t;\r\n\r\n}\r\n\r\nexport function update(n, s, k, w) {\r\n    num = n;\r\n    speed = s;\r\n    skip = k;\r\n    bar_width = parseInt(w);\r\n    height = c.height;\r\n\r\n    draw();\r\n}\r\n\r\nfunction randrange(low, high) {\r\n    return Math.floor(Math.random() * (high - low + 1) + low);\r\n}\r\n\r\nfunction draw() {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            ctx.clearRect(0, 0, width, height);\r\n\r\n            ctx.beginPath();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n\r\n                ctx.rect(0, (i * (bar_width + 2)), arr[i], bar_width);\r\n            }\r\n\r\n            ctx.fill();\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n\r\n            resolve(\"done drawing\");\r\n        }, speed)\r\n    })\r\n}\r\n\r\nexport async function bubble_sort() {\r\n    stop = 0;\r\n    let n = 0;\r\n\r\n    //For each loop\r\n    for (let i = 0; i < arr.length; i++) {\r\n        //For remaining items\r\n        for (let k = 0; k < arr.length - 1 - i; k++) {\r\n\r\n            if (arr[k] > arr[k + 1]) {\r\n\r\n                arr = swap(arr, k, k + 1)\r\n\r\n                if (n % skip == 0) {\r\n                    n = 0;\r\n                    await draw();\r\n                }\r\n\r\n                if (stop) {\r\n                    return\r\n                }\r\n\r\n                n++;\r\n            }\r\n        }\r\n    }\r\n\r\n    draw();\r\n}\r\n\r\nexport async function selection_sort() {\r\n\r\n    let n = 0;\r\n\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let maxidx = 0;\r\n\r\n        for (let k = 0; k < arr.length - i; k++) {\r\n            if (arr[maxidx] < arr[k]) {\r\n                maxidx = k;\r\n            }\r\n        }\r\n\r\n        arr = swap(arr, arr.length - i - 1, maxidx);\r\n\r\n        if (n % skip == 0) {\r\n            n = 0;\r\n            await draw();\r\n        }\r\n\r\n        n++;\r\n\r\n    }\r\n\r\n    draw();\r\n}\r\n\r\nfunction swap(a, i, j) {\r\n    let temp = a[i];\r\n    a[i] = a[j];\r\n    a[j] = temp;\r\n\r\n    return a;\r\n}","import React from 'react';\r\nimport { update, reset, init, bubble_sort, selection_sort, quick_sort } from './sorting';\r\n\r\nexport class Sorting extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            num: 100,\r\n            speed: 10,\r\n            skip: 1,\r\n            width: 3\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleReset = this.handleReset.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        init();\r\n        this.handleUpdate();\r\n        reset();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.handleUpdate();\r\n    }\r\n\r\n    handleUpdate() {\r\n        update(\r\n            this.state.num,\r\n            this.state.speed,\r\n            this.state.skip,\r\n            this.state.width\r\n        );\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n\r\n    handleReset(e) {\r\n        reset();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"outer\">\r\n                <h1>Sorting Algorithms</h1>\r\n                <button onClick={this.handleReset}>Reset</button>\r\n\r\n                <br />\r\n\r\n                <button onClick={bubble_sort}>Bubble Sort</button>\r\n                <button onClick={selection_sort}>Selection Sort</button>\r\n\r\n                <br />\r\n\r\n                <label>\r\n                    Number\r\n                    <input type=\"number\" value={this.state.num} name=\"num\" onChange={this.handleChange}></input>\r\n                </label>\r\n\r\n                <br />\r\n\r\n                <label>\r\n                    Width\r\n                    <input type=\"number\" value={this.state.width} name=\"width\" onChange={this.handleChange}></input>\r\n                </label>\r\n\r\n                <br />\r\n\r\n                <label>\r\n                    Speed\r\n                    <input type=\"number\" value={this.state.speed} name=\"speed\" onChange={this.handleChange} />\r\n                </label>\r\n\r\n                <label>\r\n                    Skip\r\n                    <input type=\"number\" value={this.state.skip} name=\"skip\" onChange={this.handleChange} />\r\n                </label>\r\n\r\n                <canvas id=\"sorting_canvas\" width={window.innerWidth} height={this.state.num * (this.state.width + 2)}></canvas>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport class Collisions extends React.Component {\r\n    render() {\r\n        return (<h1>Collisions</h1>)\r\n    }\r\n}","//https://github.com/rhardin/node-statistics2/blob/master/lib/statistics2.js\r\n\r\nexport function pchi2dist(n, y) { return pchi2(n, 1.0 - y); }\r\nexport function chi2dist(n, x) { return 1.0 - q_chi2(n, x); }\r\n\r\nfunction pchi2(n, y) {\r\n    var w, eps, v, s, qe;\r\n\r\n    if (n === 1) {\r\n        w = pnorm(1 - y / 2);\r\n        return w * w;\r\n    } else if (n === 2) {\r\n        return -2.0 * Math.log(y);\r\n    }\r\n\r\n    eps = 1.0e-5;\r\n    v = 0.0;\r\n    s = 10.0;\r\n    while (true) {\r\n        v = v + 2;\r\n\r\n        if (s <= eps) { break; }\r\n        if ((qe = q_chi2(n, v) - y) === 0.0) { break; }\r\n        if (qe < 0.0) {\r\n            v = v - s;\r\n            s = s / 10.0;\r\n        }\r\n    }\r\n    return v;\r\n}\r\n\r\nfunction pnorm(qn) {\r\n    var b = [1.570796288, 0.03706987906, -0.8364353589e-3,\r\n        -0.2250947176e-3, 0.6841218299e-5, 0.5824238515e-5,\r\n        -0.104527497e-5, 0.8360937017e-7, -0.3231081277e-8,\r\n        0.3657763036e-10, 0.6936233982e-12],\r\n        w1 = qn,\r\n        w3 = -Math.log(4.0 * w1 * (1.0 - w1)),\r\n        i = 1;\r\n\r\n    if (qn < 0.0 || qn > 1.0) { return 0.0; }\r\n    if (qn === 0.5) { return 0.0; }\r\n    if (qn > 0.5) { w1 = 1.0 - w1; }\r\n\r\n    w1 = b[0];\r\n    for (i; i < 11; i++) {\r\n        w1 += b[i] * Math.pow(w3, i);\r\n    }\r\n\r\n    if (qn > 0.5) { return Math.sqrt(w1 * w3); }\r\n\r\n    return -Math.sqrt(w1 * w3);\r\n}\r\n\r\n\r\nfunction normal__x(z) { return 1.0 - normaldist(z); }\r\n\r\nfunction q_chi2(df, chi2) {\r\n    var chi, t = 0, k = 0, s = 0;\r\n    if ((df & 1) !== 0) {\r\n        chi = Math.sqrt(chi2);\r\n\r\n        if (df === 1) { return 2 * normal__x(chi); }\r\n\r\n        t = chi * Math.exp(-0.5 * chi2) / Math.sqrt(2 * Math.PI);\r\n        s = t;\r\n        k = 3;\r\n        while (k < df) {\r\n            t = t * (chi2 / k);\r\n            s = s + t;\r\n            k = k + 2;\r\n        }\r\n\r\n        return 2 * (normal__x(chi) + s);\r\n    }\r\n\r\n    t = Math.exp(-0.5 * chi2);\r\n    s = t;\r\n    k = 2;\r\n    while (k < df) {\r\n        t = t * (chi2 / k);\r\n        s = s + t;\r\n        k = k + 2;\r\n    }\r\n\r\n    return s;\r\n}\r\n\r\n\r\n\r\n\r\nfunction normaldist(z) {\r\n    return p_nor(z);\r\n}\r\n\r\nfunction p_nor(z) {\r\n    var e, z2, prev = 0.0, t, p, i = 3;\r\n\r\n    if (z < -12) { return 0.0; }\r\n    if (z > 12) { return 1.0; }\r\n    if (z === 0.0) { return 0.5; }\r\n    if (z > 0) {\r\n        e = true;\r\n    } else {\r\n        e = false;\r\n        z = -z;\r\n    }\r\n\r\n    z2 = z * z;\r\n    p = z * Math.exp(-0.5 * z2) / Math.sqrt(2 * Math.PI);\r\n    t = p;\r\n\r\n    for (i; i < 200; i = i + 2) {\r\n        prev = p;\r\n        t = t * (z2 / i);\r\n        p = p + t;\r\n        if (p <= prev) { return (e ? 0.5 + p : 0.5 - p); }\r\n    }\r\n\r\n    return (e ? 1.0 : 0.0);\r\n}","import React from 'react';\r\nimport './chisquared.css';\r\nimport { expected_frequencies, chi_sq } from './chisquared';\r\nimport { chi2dist } from './pvalue';\r\n\r\nexport class ChiSquared extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            rows: 2,\r\n            columns: 2,\r\n            inputs: [],\r\n            values: [],\r\n            lookup: {},\r\n            horizontal: [],\r\n            horizontalv: [],\r\n            vertical: [],\r\n            verticalv: [],\r\n            sumh: [],\r\n            sumv: [],\r\n            total: [],\r\n            freq: [],\r\n            enough: false,\r\n            warning: true,\r\n            chi: 0,\r\n            sig: 0.05\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.update = this.update.bind(this);\r\n        this.renderTable = this.renderTable.bind(this);\r\n        this.dataChange = this.dataChange.bind(this);\r\n        this.renderData = this.renderData.bind(this);\r\n        this.renderHeader = this.renderHeader.bind(this);\r\n        this.headerChange = this.headerChange.bind(this);\r\n        this.renderLeft = this.renderLeft.bind(this);\r\n        this.leftChange = this.leftChange.bind(this);\r\n        this.init = this.init.bind(this);\r\n        this.footerSum = this.footerSum.bind(this);\r\n        this.totalUpdate = this.totalUpdate.bind(this);\r\n        this.expectedBody = this.expectedBody.bind(this);\r\n        this.expectedHeader = this.expectedHeader.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.init();\r\n        await this.update();\r\n        await this.totalUpdate();\r\n    }\r\n\r\n    init() {\r\n        let r = this.state.rows;\r\n        let c = this.state.columns;\r\n        let h = [];\r\n        let hv = [];\r\n        let z = [];\r\n        let zv = [];\r\n\r\n        for (let i = 0; i < r; i++) {\r\n            let hn = `horizontal-${i}`;\r\n            h.push(hn);\r\n            hv.push(\"\");\r\n            this.state.lookup[hn] = i;\r\n        }\r\n\r\n        for (let j = 0; j < c; j++) {\r\n            let zn = `vertical-${j}`;\r\n            z.push(zn)\r\n            zv.push(\"\")\r\n\r\n            this.state.lookup[zn] = j;\r\n        }\r\n\r\n        this.state.horizontal = h;\r\n        this.state.horizontalv = hv;\r\n        this.state.vertical = z;\r\n        this.state.verticalv = zv;\r\n\r\n        this.forceUpdate();\r\n\r\n    }\r\n\r\n    update() {\r\n        let r = this.state.rows;\r\n        let c = this.state.columns;\r\n        let v = [];\r\n        let l = [];\r\n        let h = this.state.horizontal;\r\n        let hv = this.state.horizontalv;\r\n        let z = this.state.vertical;\r\n        let zv = this.state.verticalv;\r\n\r\n        if (r > this.state.horizontal.length) {\r\n            let hn = `horizontal-${r - 1}`;\r\n\r\n            h.push(hn);\r\n            hv.push(\"\");\r\n\r\n            this.state.lookup[hn] = r - 1;\r\n        }\r\n\r\n        if (r < this.state.horizontal.length) {\r\n            h.pop();\r\n            hv.pop();\r\n        }\r\n\r\n        if (c > this.state.vertical.length) {\r\n            let zn = `vertical-${c - 1}`;\r\n\r\n            z.push(zn);\r\n            zv.push(\"\");\r\n\r\n            this.state.lookup[zn] = c - 1;\r\n        }\r\n\r\n        if (c < this.state.vertical.length) {\r\n            z.pop();\r\n            zv.pop();\r\n        }\r\n\r\n        for (let i = 0; i < r; i++) {\r\n            v.push([]);\r\n            l.push([]);\r\n\r\n            for (let k = 0; k < c; k++) {\r\n                v[i].push(0);\r\n\r\n                let n = `input-${i}-${k}`;\r\n                l[i].push(n);\r\n\r\n                this.state.lookup[n] = [i, k];\r\n            }\r\n        }\r\n\r\n\r\n        this.setState({\r\n            values: v,\r\n            inputs: l,\r\n            horizontal: h,\r\n            horizontalv: hv,\r\n            vertical: z,\r\n            verticalv: zv\r\n        })\r\n\r\n    }\r\n\r\n    async handleChange(e) {\r\n        await this.setState({ [e.target.name]: parseInt(e.target.value) })\r\n\r\n        this.update();\r\n        this.totalUpdate();\r\n    }\r\n\r\n    dataChange(e) {\r\n        let name = e.target.name;\r\n        let r = this.state.lookup[name][0];\r\n        let c = this.state.lookup[name][1];\r\n\r\n        this.state.values[r][c] = parseFloat(e.target.value);\r\n\r\n        this.totalUpdate();\r\n\r\n        const a = expected_frequencies(this.state.sumh, this.state.sumv, this.state.total);\r\n        const b = chi_sq(a[0], this.state.values);\r\n\r\n        this.setState({ freq: a[0], enough: a[1], warning: a[2], chi: b });\r\n    }\r\n\r\n    totalUpdate() {\r\n        this.state.sumh = [];\r\n        this.state.sumv = [];\r\n\r\n        for (let i = 0; i < this.state.horizontal.length; i++) {\r\n            this.state.sumh.push(this.state.values[i].reduce((a, b) => a + b, 0))\r\n        }\r\n\r\n        for (let col = 0; col < this.state.vertical.length; col++) {\r\n            let sum = 0\r\n\r\n            for (let row = 0; row < this.state.horizontal.length; row++) {\r\n                sum += this.state.values[row][col];\r\n            }\r\n\r\n            this.state.sumv.push(sum)\r\n        }\r\n\r\n        this.state.total = this.state.sumh.reduce((a, b) => a + b, 0);\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n\r\n    renderTable() {\r\n        let num = -1;\r\n        return (\r\n            this.state.inputs.map((inp) => {\r\n                num++;\r\n                return (\r\n                    <tr>\r\n                        {this.renderLeft(num)}\r\n                        {this.renderData(inp)}\r\n                        <td>\r\n                            {this.state.sumh[num]}\r\n                        </td>\r\n                    </tr>\r\n                )\r\n            })\r\n        )\r\n    }\r\n\r\n    renderHeader() {\r\n        return (\r\n            <tr>\r\n                <td>Chi Squared</td>\r\n                {\r\n                    this.state.vertical.map(name => {\r\n                        let pos = this.state.lookup[name];\r\n                        let n = `Category ${pos + 1}`\r\n\r\n                        return (\r\n                            <td>\r\n                                <input\r\n                                    name={name}\r\n                                    type=\"text\"\r\n                                    placeholder={n}\r\n                                    value={this.state.verticalv[pos]}\r\n                                    onChange={this.headerChange}\r\n                                />\r\n                            </td>\r\n                        )\r\n                    })\r\n                }\r\n\r\n                <td>Total</td>\r\n            </tr>\r\n\r\n        )\r\n    }\r\n\r\n    headerChange(e) {\r\n        this.update();\r\n\r\n        let name = e.target.name;\r\n        let pos = this.state.lookup[name];\r\n\r\n        this.state.verticalv[pos] = (e.target.value);\r\n\r\n        this.forceUpdate();\r\n\r\n    }\r\n\r\n    renderLeft(num) {\r\n        let name = this.state.horizontal[num];\r\n        let n = `Category ${num + 1}`\r\n\r\n        return (\r\n            <td>\r\n                <input\r\n                    name={name}\r\n                    type=\"text\"\r\n                    placeholder={n}\r\n                    value={this.state.horizontalv[num]}\r\n                    onChange={this.leftChange}\r\n                />\r\n            </td>\r\n        )\r\n    }\r\n\r\n    leftChange(e) {\r\n        this.update();\r\n\r\n        let name = e.target.name;\r\n        let pos = this.state.lookup[name];\r\n\r\n        this.state.horizontalv[pos] = (e.target.value);\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    footerSum() {\r\n        return (\r\n            <tr>\r\n                <td>Total</td>\r\n\r\n                {this.state.sumv.map(v => {\r\n                    return (\r\n                        <td>{v}</td>\r\n                    )\r\n                })}\r\n\r\n                <td>{this.state.total}</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    renderData(inp) {\r\n        return (\r\n            inp.map(data => {\r\n\r\n                let r = this.state.lookup[data][0];\r\n                let c = this.state.lookup[data][1];\r\n\r\n                return (<td>\r\n                    <input\r\n                        name={data}\r\n                        key={data}\r\n                        type=\"number\"\r\n                        step=\"any\"\r\n                        min=\"0\"\r\n                        value={this.state.values[r][c]}\r\n                        onChange={this.dataChange}\r\n                    />\r\n                </td>)\r\n\r\n            })\r\n        )\r\n    }\r\n\r\n    expectedHeader() {\r\n        return (\r\n            <tr>\r\n                <td>Expected Frequencies</td>\r\n\r\n                {this.state.verticalv.map(val => {\r\n                    return (\r\n                        <td className=\"category\">{val}</td>\r\n                    )\r\n                })}\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    expectedBody() {\r\n\r\n        let num = -1\r\n\r\n        return (\r\n            this.state.freq.map(row => {\r\n                num++;\r\n                return (<tr>\r\n                    <td className=\"category\">{this.state.horizontalv[num]}</td>\r\n\r\n                    {row.map(val => {\r\n                        return <td>{+val.toFixed(9)}</td>\r\n                    })}\r\n                </tr>)\r\n            })\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let en;\r\n        let war;\r\n        let result;\r\n        let df = (this.state.columns - 1) * (this.state.rows - 1);\r\n        const p = 1 - chi2dist(df, this.state.chi);\r\n\r\n        if (!this.state.enough) {\r\n            en = <h2>Not enough data fields filled in.</h2>\r\n        } else {\r\n            en = <h2></h2>\r\n        }\r\n\r\n        if (this.state.warning) {\r\n            war = <h3 id=\"warning\">WARNING: Some expected frequencies are below 5.</h3>\r\n        } else {\r\n            war = <h1></h1>\r\n        }\r\n\r\n        if (p < this.state.sig) {\r\n            result = <h3>There is sufficient evidence to reject H0</h3>\r\n        } else {\r\n            result = <h3>There is insufficient evidence to reject H0</h3>\r\n        }\r\n\r\n        return (\r\n            <div id=\"outer\">\r\n                <h4>Please only increment/decrement the row and column by one else it will break</h4>\r\n\r\n                <div id=\"input-boxes\">\r\n                    <label>\r\n                        Rows\r\n                        <input\r\n                            name=\"rows\"\r\n                            type=\"number\"\r\n                            value={this.state.rows}\r\n                            min=\"1\"\r\n                            onChange={this.handleChange} />\r\n                    </label>\r\n\r\n                    <p />\r\n\r\n                    <label>\r\n                        Columns\r\n                        <input\r\n                            name=\"columns\"\r\n                            type=\"number\"\r\n                            value={this.state.columns}\r\n                            min=\"1\"\r\n                            onChange={this.handleChange} />\r\n                    </label>\r\n\r\n                    <p />\r\n\r\n                    <label>\r\n                        Significance level\r\n                        <input\r\n                            name=\"sig\"\r\n                            type=\"number\"\r\n                            value={this.state.sig}\r\n                            min=\"0\"\r\n                            max=\"1\"\r\n                            step=\"any\"\r\n                            onChange={this.handleChange} />\r\n                    </label>\r\n                </div>\r\n\r\n\r\n                <p />\r\n\r\n                <table id=\"base\">\r\n                    <tbody>\r\n                        {this.renderHeader()}\r\n                        {this.renderTable()}\r\n                        {this.footerSum()}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <br />\r\n\r\n                {en}\r\n\r\n                <br />\r\n\r\n                <table>\r\n                    <tbody>\r\n                        {this.expectedHeader()}\r\n                        {this.expectedBody()}\r\n                    </tbody>\r\n                </table>\r\n\r\n                {war}\r\n\r\n                <h3>χ2 = {this.state.chi}</h3>\r\n\r\n                <h3>Degrees of freedom - {df}</h3>\r\n\r\n                <h3>P value - {p}</h3>\r\n\r\n                {result}\r\n            </div>\r\n        )\r\n    }\r\n}","export function expected_frequencies(sumh, sumv, total) {\r\n\r\n    let expected = [];\r\n    let enough = true;\r\n    let warning = false;\r\n\r\n    for (let row = 0; row < sumh.length; row++) {\r\n        expected.push([]);\r\n\r\n        let frac = sumh[row] / total\r\n        for (let col = 0; col < sumv.length; col++) {\r\n            let val = frac * sumv[col];\r\n\r\n            if (!val) {\r\n                enough = false;\r\n            }\r\n\r\n            if (val < 5) {\r\n                warning = true;\r\n            }\r\n\r\n            expected[row].push(+val);\r\n        }\r\n    }\r\n\r\n    return [expected, enough, warning];\r\n\r\n}\r\n\r\nexport function chi_sq(freq, values) {\r\n\r\n    let sum = 0\r\n\r\n    for (let i = 0; i < freq.length; i++) {\r\n        for (let k = 0; k < freq[i].length; k++) {\r\n            let e = freq[i][k];\r\n            let o = values[i][k];\r\n\r\n            let cont = ((o - e) ** 2) / e\r\n\r\n            sum += cont\r\n            console.log(i, k, cont)\r\n        }\r\n    }\r\n\r\n    return sum\r\n}","import React from \"react\";\r\nimport { HashRouter, Switch, Route, Link } from \"react-router-dom\";\r\nimport './main.css'\r\nimport { Orbits } from \"./projects/orbits/orbits.jsx\";\r\nimport { Quadtree } from \"./projects/quadtree/quadtree.jsx\";\r\nimport { Maze } from \"./projects/maze/maze.jsx\";\r\nimport { Sorting } from \"./projects/sorting/sorting.jsx\";\r\nimport { Collisions } from \"./projects/collsions/collisions.jsx\";\r\nimport { ChiSquared } from \"./projects/chisquared/chisquared.jsx\";\r\n\r\nexport class Main extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<HashRouter basename=\"/\">\r\n\t\t\t\t<Switch>\r\n\r\n\t\t\t\t\t<Route exact path=\"/\">\r\n\t\t\t\t\t\t<div id='main'>\r\n\t\t\t\t\t\t\t<div class='tile' id='orbits'>\r\n\t\t\t\t\t\t\t\t<Link class=\"link\" to=\"/orbits\">\r\n\t\t\t\t\t\t\t\t\t<div class='inside'>\r\n\t\t\t\t\t\t\t\t\t\t<h1>Orbits</h1>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div class='tile' id='quadtree'>\r\n\t\t\t\t\t\t\t\t<Link class=\"link\" to=\"/quadtree\">\r\n\t\t\t\t\t\t\t\t\t<div class='inside'>\r\n\t\t\t\t\t\t\t\t\t\tquadtree\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div class='tile' id='sorting'>\r\n\t\t\t\t\t\t\t\t<Link class=\"link\" to=\"/sorting\">\r\n\t\t\t\t\t\t\t\t\t<div class='inside'>\r\n\t\t\t\t\t\t\t\t\t\tSorting\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div class='tile' id='maze'>\r\n\t\t\t\t\t\t\t\t<Link class=\"link\" to=\"/maze\">\r\n\t\t\t\t\t\t\t\t\t<div class='inside'>\r\n\t\t\t\t\t\t\t\t\t\tMaze\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t{/* <div class='tile' id='collisions'>\r\n\t\t\t\t\t\t\t\t<Link class=\"link\" to=\"/collisions\">\r\n\t\t\t\t\t\t\t\t\t<div class='inside'>\r\n\t\t\t\t\t\t\t\t\t\tCollisions\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</div> */}\r\n\r\n\t\t\t\t\t\t\t<div class='tile' id='chisquared'>\r\n\t\t\t\t\t\t\t\t<Link class=\"link\" to=\"/chisquared\">\r\n\t\t\t\t\t\t\t\t\t<div class='inside'>\r\n\t\t\t\t\t\t\t\t\t\tChi Squared\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t<Route path=\"/orbits\">\r\n\t\t\t\t\t\t<Orbits />\r\n\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t<Route path=\"/quadtree\">\r\n\t\t\t\t\t\t<Quadtree />\r\n\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t<Route path=\"/maze\">\r\n\t\t\t\t\t\t<Maze />\r\n\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t<Route path=\"/sorting\">\r\n\t\t\t\t\t\t<Sorting />\r\n\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t{/* <Route path=\"/collisions\">\r\n\t\t\t\t\t\t<Collisions />\r\n\t\t\t\t\t</Route> */}\r\n\r\n\t\t\t\t\t<Route path=\"/chisquared\">\r\n\t\t\t\t\t\t<ChiSquared />\r\n\t\t\t\t\t</Route>\r\n\r\n\r\n\r\n\t\t\t\t</Switch>\r\n\t\t\t</HashRouter>\r\n\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Main } from \"./Main.jsx\";\n\nReactDOM.render(<Main />, document.getElementById(\"app\"));\nconsole.log(\"Loaded\")"],"sourceRoot":""}